import tkinter as tk
from tkinter import messagebox, ttk
import mysql.connector
from mysql.connector import Error
import bcrypt

# Подключение к базе данных MySQL
def create_connection():
    return mysql.connector.connect(
        host="localhost",
        user="root",
        password="password",
        database="employee_time_tracking"
    )

def authenticate_user(username, password):
    try:
        conn = create_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
        user = cursor.fetchone()
        if user and bcrypt.checkpw(password.encode('utf-8'), user['password'].encode('utf-8')):
            return user
        else:
            return None
    except Error as e:
        messagebox.showerror("Database Error", f"Error connecting to database: {e}")
    finally:
        if conn:
            conn.close()

class TimeTrackingApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Учет рабочего времени сотрудников")
        self.root.geometry("600x400")
        
        # Текущий пользователь (если авторизован)
        self.current_user = None
        
        self.main_screen()

    def main_screen(self):
        self.clear_screen()
        
        # Экран авторизации
        self.username_label = tk.Label(self.root, text="Username")
        self.username_label.pack()
        self.username_entry = tk.Entry(self.root)
        self.username_entry.pack()
        
        self.password_label = tk.Label(self.root, text="Password")
        self.password_label.pack()
        self.password_entry = tk.Entry(self.root, show="*")
        self.password_entry.pack()
        
        self.login_button = tk.Button(self.root, text="Login", command=self.login)
        self.login_button.pack()

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        
        user = authenticate_user(username, password)
        
        if user:
            self.current_user = user
            self.username_entry.delete(0, tk.END)
            self.password_entry.delete(0, tk.END)
            self.show_dashboard()
        else:
            messagebox.showerror("Authentication Failed", "Invalid username or password")
        
    def show_dashboard(self):
        self.clear_screen()
        if self.current_user['role'] == 'admin':
            self.show_admin_dashboard()
        else:
            self.show_employee_dashboard()

    def show_admin_dashboard(self):
        self.clear_screen()
        
        # Администратор может управлять сотрудниками
        self.add_employee_button = tk.Button(self.root, text="Добавить сотрудника", command=self.add_employee)
        self.add_employee_button.pack()

        self.view_hours_button = tk.Button(self.root, text="Просмотр рабочих часов", command=self.view_work_hours)
        self.view_hours_button.pack()

    def show_employee_dashboard(self):
        self.clear_screen()
        
        # Сотрудник может добавить свои рабочие часы
        self.add_work_hours_button = tk.Button(self.root, text="Добавить рабочие часы", command=self.add_work_hours)
        self.add_work_hours_button.pack()
        
        self.view_work_hours_button = tk.Button(self.root, text="Просмотр рабочих часов", command=self.view_work_hours)
        self.view_work_hours_button.pack()

    def add_employee(self):
        self.clear_screen()
        
        self.name_label = tk.Label(self.root, text="Имя сотрудника")
        self.name_label.pack()
        self.name_entry = tk.Entry(self.root)
        self.name_entry.pack()
        
        self.department_label = tk.Label(self.root, text="Подразделение")
        self.department_label.pack()
        self.department_entry = tk.Entry(self.root)
        self.department_entry.pack()
        
        self.save_button = tk.Button(self.root, text="Сохранить", command=self.save_employee)
        self.save_button.pack()

    def save_employee(self):
        name = self.name_entry.get()
        department = self.department_entry.get()

        try:
            conn = create_connection()
            cursor = conn.cursor()
            cursor.execute("INSERT INTO employees (name, department) VALUES (%s, %s)", (name, department))
            conn.commit()
            messagebox.showinfo("Success", "Employee added successfully")
            self.show_admin_dashboard()
        except Error as e:
            messagebox.showerror("Error", f"Error adding employee: {e}")
        finally:
            if conn:
                conn.close()

    def add_work_hours(self):
        self.clear_screen()
        
        self.date_label = tk.Label(self.root, text="Дата")
        self.date_label.pack()
        self.date_entry = tk.Entry(self.root)
        self.date_entry.pack()
        
        self.hours_label = tk.Label(self.root, text="Часы работы")
        self.hours_label.pack()
        self.hours_entry = tk.Entry(self.root)
        self.hours_entry.pack()
        
        self.description_label = tk.Label(self.root, text="Описание")
        self.description_label.pack()
        self.description_entry = tk.Entry(self.root)
        self.description_entry.pack()
        
        self.save_button = tk.Button(self.root, text="Сохранить", command=self.save_work_hours)
        self.save_button.pack()

    def save_work_hours(self):
        date = self.date_entry.get()
        hours_worked = self.hours_entry.get()
        description = self.description_entry.get()
        
        if self.current_user:
            try:
                conn = create_connection()
                cursor = conn.cursor()
                cursor.execute("INSERT INTO work_hours (employee_id, date, hours_worked, description) VALUES (%s, %s, %s, %s)",
                               (self.current_user['id'], date, hours_worked, description))
                conn.commit()
                messagebox.showinfo("Success", "Work hours added successfully")
                self.show_employee_dashboard()
            except Error as e:
                messagebox.showerror("Error", f"Error saving work hours: {e}")
            finally:
                if conn:
                    conn.close()

    def view_work_hours(self):
        self.clear_screen()
        
        self.work_hours_listbox = tk.Listbox(self.root)
        self.work_hours_listbox.pack()
        
        try:
            conn = create_connection()
            cursor = conn.cursor(dictionary=True)
            if self.current_user['role'] == 'admin':
                cursor.execute("SELECT * FROM work_hours")
            else:
                cursor.execute("SELECT * FROM work_hours WHERE employee_id = %s", (self.current_user['id'],))
            work_hours = cursor.fetchall()

            for record in work_hours:
                self.work_hours_listbox.insert(tk.END, f"{record['date']} - {record['hours_worked']} hours")
        except Error as e:
            messagebox.showerror("Error", f"Error fetching work hours: {e}")
        finally:
            if conn:
                conn.close()

    def clear_screen(self):
        for widget in self.root.winfo_children():
            widget.destroy()
if __name__ == "__main__":
    root = tk.Tk()
    app = TimeTrackingApp(root)
    root.mainloop()
